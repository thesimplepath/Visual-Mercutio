/****************************************************************************
 * ==> PSS_Stamp -----------------------------------------------------------*
 ****************************************************************************
 * Description : Provides a file stamp generated by ProcessSoft             *
 *               applications                                               *
 * Developer   : Processsoft                                                *
 ****************************************************************************/

#ifndef PSS_StampH
#define PSS_StampH

// change the definition of AFX_EXT... to make it import
#undef AFX_EXT_CLASS
#undef AFX_EXT_API
#undef AFX_EXT_DATA
#define AFX_EXT_CLASS AFX_CLASS_IMPORT
#define AFX_EXT_API AFX_API_IMPORT
#define AFX_EXT_DATA AFX_DATA_IMPORT

// processsoft
#include "PSS_Date.h"

#ifdef _ZBASELIBEXPORT
    // put the values back to make AFX_EXT_CLASS export again
    #undef AFX_EXT_CLASS
    #undef AFX_EXT_API
    #undef AFX_EXT_DATA
    #define AFX_EXT_CLASS AFX_CLASS_EXPORT
    #define AFX_EXT_API AFX_API_EXPORT
    #define AFX_EXT_DATA AFX_DATA_EXPORT
#endif

/**
* File stamp generated by ProcessSoft applications
*@author Dominique Aigroz, Jean-Milost Reymond
*/
class AFX_EXT_CLASS PSS_Stamp
{
    public:
        /**
        * Document file type
        */
        enum class IEDocumentFileType
        {
            IE_FT_FormDocument,
            IE_FT_ProcessDocument,
            IE_FT_ModelDocument
        };

        /**
        * File type definition
        */
        enum class IEFileTypeDefinition
        {
            IE_FD_DocumentType,
            IE_FD_TemplateType,
            IE_FD_LibraryType
        };

        /**
        * Document data type
        */
        enum class IEDocumentDataType
        {
            IE_DT_Form,
            IE_DT_Binary,
            IE_DT_ExternalForm,
            IE_DT_ExternalBinary,
            IE_DT_URL
        };

        PSS_Stamp();

        /**
        * Copy constructor
        *@param other - other object to copy from
        */
        PSS_Stamp(const PSS_Stamp& other);

        virtual ~PSS_Stamp();

        /**
        * Copy operator
        *@param other - other object to copy from
        *@return copy of itself
        */
        const PSS_Stamp& operator = (const PSS_Stamp& other);

        /**
        * Stores from the archive to the stamp
        *@param ar - archive
        *@param stamp - stamp
        *@return archive, to allow operator to be chained with other items, e.g a >> b >> c
        */
        AFX_EXT_API friend CArchive& operator >> (CArchive& ar, PSS_Stamp& stamp);

        /**
        * Stores the stamp to the archive
        *@param ar - archive
        *@param stamp - stamp
        *@return archive, to allow operator to be chained with other items, e.g a << b << c
        */
        AFX_EXT_API friend CArchive& operator << (CArchive& ar, const PSS_Stamp& stamp);

        /**
        * Clones the stamp
        *@return cloned stamp, NULL on error
        */
        virtual PSS_Stamp* Clone() const;

        /**
        * Reads the stamp from a file
        *@param fileName - file name
        *@return TRUE on success, otherwise FALSE
        */
        virtual BOOL ReadFromFile(const CString& fileName);

        /**
        * Writes the stamp to a file
        *@param fileName - file name
        *@return TRUE on success, otherwise FALSE
        */
        virtual BOOL WriteToFile(const CString& fileName);

        /**
        * Checks if the document is read-only
        *@return TRUE if the document is read-only, otherwise FALSE
        */
        virtual inline BOOL IsReadOnly() const;

        /**
        * Sets the document as read-only
        *@param value - if TRUE, the document is read-only
        */
        virtual inline void SetAsReadOnly(BOOL value = TRUE);

        /**
        * Checks if the form is standard
        *@return TRUE if the form is standard, otherwise FALSE
        */
        virtual inline BOOL IsStandardForm() const;

        /**
        * Checks if the key is equals to the standard form
        *@param key - key to check
        *@return TRUE if the key is equal to the standard form, otherwise FALSE
        */
        virtual BOOL IsInternalKeyEqualTo(const CString& key) const;

        /**
        * Reads the published file version and increment it
        *@param fileName - file name
        *@return the published file version, -1 on error
        */
        virtual LONG IncrementPublishVersionOfFile(const CString& fileName);

        /**
        * Reads the published file version and decrement it
        *@param fileName - file name
        *@return the published file version, -1 on error
        */
        virtual LONG DecrementPublishVersionOfFile(const CString& filenName);

        /**
        * Gets the published version of file
        *@param fileName - file name
        *@return the published file version
        */
        virtual LONG GetPublishVersionOfFile(const CString& fileName);

        /**
        * Sets the published version of file
        *@param fileName - file name
        *@param version - version
        *@return TRUE if the file version has been correctly set, otherwise FALSE
        */
        virtual BOOL SetPublishVersionOfFile(const CString& fileName, LONG version);

        /**
        * Gets the stamp used to recognize the file
        *@return the stamp used to recognize the file
        */
        virtual inline const CString GetStamp() const;

        /**
        * Sets the stamp used to recognize the file
        *@param value - the stamp used to recognize the file
        */
        virtual inline void SetStamp(const CString& value);

        /**
        * Gets the internal file version
        *@return the internal file version
        */
        virtual inline const long GetInternalVersion() const;

        /**
        * Sets the internal file version
        *@param value - the internal file version
        */
        virtual inline void SetInternalVersion(long value);

        /**
        * Gets the file title
        *@return the file title
        */
        virtual inline const CString GetTitle() const;

        /**
        * Sets the file title
        *@return the file title
        */
        virtual inline void SetTitle(const CString& value);

        /**
        * Gets the file description
        *@return the file description
        */
        virtual inline const CString GetDescription() const;

        /**
        * Sets the file description
        *@param value - the file description
        */
        virtual inline void SetDescription(const CString& value);

        /**
        * Gets the file where the template has been defined
        *@return the file where the template has been defined
        */
        virtual inline const CString GetTemplate() const;

        /**
        * Sets the file where the template has been defined
        *@param value - the file where the template has been defined
        */
        virtual inline void SetTemplate(const CString& value);

        /**
        * Gets the creation date
        *@return the creation date
        */
        virtual inline const PSS_Date GetStampCreationDate() const;

        /**
        * Sets the creation date
        *@param value - the creation date
        */
        virtual inline void SetStampCreationDate(const PSS_Date& value);

        /**
        * Gets the last modification date
        *@return the last modification date
        */
        virtual inline const PSS_Date GetStampModificationDate() const;

        /**
        * Sets the last modification date
        *@param value - the last modification date
        */
        virtual inline void SetStampModificationDate(const PSS_Date& value);

        /**
        * Gets the application name which modified the file
        *@return the application name which modified the file
        */
        virtual inline const CString GetAppModifier() const;

        /**
        * Sets the application name which modified the file
        *@param value - the application name which modified the file
        */
        virtual inline void SetAppModifier(const CString& value);

        /**
        * Gets the file type
        *@return the file type
        */
        virtual inline const IEFileTypeDefinition GetFileType() const;

        /**
        * Sets the file type
        *@param value - the file type
        */
        virtual inline void SetFileType(IEFileTypeDefinition value);

        /**
        * Gets the published version
        *@return the published version
        */
        virtual inline const LONG GetPublishVersion() const;

        /**
        * Sets the published version
        *@param value - the published version
        */
        virtual inline void SetPublishVersion(LONG value);

        /**
        * Gets the publication date
        *@return the publication date
        */
        virtual inline const PSS_Date GetPublishDate() const;

        /**
        * Sets the publication date
        *@param value - the publication date
        */
        virtual inline void SetPublishDate(const PSS_Date& value);

        /**
        * Gets the user responsible for the publication
        *@return the user responsible for the publication
        */
        virtual inline const CString GetPublishUser() const;

        /**
        * Sets the user responsible for the publication
        *@param value - the user responsible for the publication
        */
        virtual inline void SetPublishUser(const CString& value);

        /**
        * Gets the internal key for checking if the form is astandard form
        *@return the internal key for checking if the form is astandard form
        */
        virtual inline const CString GetInternalKey() const;

        /**
        * Sets the internal key for checking if the form is astandard form
        *@param value - the internal key for checking if the form is astandard form
        */
        virtual inline void SetInternalKey(const CString& value);

        /**
        * Gets the document data type
        *@return the document data type
        *@note Used when the data contained in the doucument isn't a form
        */
        virtual inline const IEDocumentDataType GetDocumentDataType() const;

        /**
        * Sets the document data type
        *@param value - the document data type
        *@note Used when the data contained in the doucument isn't a form
        */
        virtual inline void SetDocumentDataType(IEDocumentDataType value);

        /**
        * Gets the document type, form or process
        *@return the document type
        */
        virtual inline const IEDocumentFileType GetDocumentFileType() const;

        /**
        * Sets the document type, form or process
        *@param value - the document type
        */
        virtual inline void SetDocumentFileType(IEDocumentFileType value);

    private:
        IEDocumentFileType   m_DocumentFileType;
        IEFileTypeDefinition m_FileType;
        IEDocumentDataType   m_DocumentDataType;
        CString              m_Stamp;
        CString              m_Title;
        CString              m_Description;
        CString              m_Template;
        CString              m_AppModifier;
        CString              m_PublishUser;
        CString              m_InternalKey;
        PSS_Date             m_StampCreationDate;
        PSS_Date             m_StampModificationDate;
        PSS_Date             m_PublishDate;
        LONG                 m_PublishVersion;
        long                 m_InternalVersion;
        BOOL                 m_ReadOnly;
};

//---------------------------------------------------------------------------
// PSS_Stamp
//---------------------------------------------------------------------------
BOOL PSS_Stamp::IsReadOnly() const
{
    return m_ReadOnly;
}
//---------------------------------------------------------------------------
void PSS_Stamp::SetAsReadOnly(BOOL value)
{
    m_ReadOnly = value;
}
//---------------------------------------------------------------------------
BOOL PSS_Stamp::IsStandardForm() const
{
    return m_InternalKey.IsEmpty() == FALSE;
}
//---------------------------------------------------------------------------
const CString PSS_Stamp::GetStamp() const
{
    return m_Stamp;
}
//---------------------------------------------------------------------------
void PSS_Stamp::SetStamp(const CString& value)
{
    m_Stamp = value;
}
//---------------------------------------------------------------------------
const long PSS_Stamp::GetInternalVersion() const
{
    return m_InternalVersion;
}
//---------------------------------------------------------------------------
void PSS_Stamp::SetInternalVersion(long value)
{
    m_InternalVersion = value;
}
//---------------------------------------------------------------------------
const CString PSS_Stamp::GetTitle() const
{
    return m_Title;
}
//---------------------------------------------------------------------------
void PSS_Stamp::SetTitle(const CString& value)
{
    m_Title = value;
}
//---------------------------------------------------------------------------
const CString PSS_Stamp::GetDescription() const
{
    return m_Description;
}
//---------------------------------------------------------------------------
void PSS_Stamp::SetDescription(const CString& value)
{
    m_Description = value;
}
//---------------------------------------------------------------------------
const CString PSS_Stamp::GetTemplate() const
{
    return m_Template;
}
//---------------------------------------------------------------------------
void PSS_Stamp::SetTemplate(const CString& value)
{
    m_Template = value;
}
//---------------------------------------------------------------------------
const PSS_Date PSS_Stamp::GetStampCreationDate() const
{
    return m_StampCreationDate;
}
//---------------------------------------------------------------------------
void PSS_Stamp::SetStampCreationDate(const PSS_Date& value)
{
    m_StampCreationDate = value;
}
//---------------------------------------------------------------------------
const PSS_Date PSS_Stamp::GetStampModificationDate() const
{
    return m_StampModificationDate;
}
//---------------------------------------------------------------------------
void PSS_Stamp::SetStampModificationDate(const PSS_Date& value)
{
    m_StampModificationDate = value;
}
//---------------------------------------------------------------------------
const CString PSS_Stamp::GetAppModifier() const
{
    return m_AppModifier;
}
//---------------------------------------------------------------------------
void PSS_Stamp::SetAppModifier(const CString& value)
{
    m_AppModifier = value;
}
//---------------------------------------------------------------------------
const PSS_Stamp::IEFileTypeDefinition PSS_Stamp::GetFileType() const
{
    return m_FileType;
}
//---------------------------------------------------------------------------
void PSS_Stamp::SetFileType(IEFileTypeDefinition value)
{
    m_FileType = value;
}
//---------------------------------------------------------------------------
const LONG PSS_Stamp::GetPublishVersion() const
{
    return m_PublishVersion;
}
//---------------------------------------------------------------------------
void PSS_Stamp::SetPublishVersion(LONG value)
{
    m_PublishVersion = value;
}
//---------------------------------------------------------------------------
const PSS_Date PSS_Stamp::GetPublishDate() const
{
    return m_PublishDate;
}
//---------------------------------------------------------------------------
void PSS_Stamp::SetPublishDate(const PSS_Date& value)
{
    m_PublishDate = value;
}
//---------------------------------------------------------------------------
const CString PSS_Stamp::GetPublishUser() const
{
    return m_PublishUser;
}
//---------------------------------------------------------------------------
void PSS_Stamp::SetPublishUser(const CString& value)
{
    m_PublishUser = value;
}
//---------------------------------------------------------------------------
const CString PSS_Stamp::GetInternalKey() const
{
    return m_InternalKey;
}
//---------------------------------------------------------------------------
void PSS_Stamp::SetInternalKey(const CString& value)
{
    m_InternalKey = value;
}
//---------------------------------------------------------------------------
const PSS_Stamp::IEDocumentDataType PSS_Stamp::GetDocumentDataType() const
{
    return m_DocumentDataType;
}
//---------------------------------------------------------------------------
void PSS_Stamp::SetDocumentDataType(IEDocumentDataType value)
{
    m_DocumentDataType = value;
}
//---------------------------------------------------------------------------
const PSS_Stamp::IEDocumentFileType PSS_Stamp::GetDocumentFileType() const
{
    return m_DocumentFileType;
}
//---------------------------------------------------------------------------
void PSS_Stamp::SetDocumentFileType(IEDocumentFileType value)
{
    m_DocumentFileType = value;
}
//---------------------------------------------------------------------------

#endif
